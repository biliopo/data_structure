#include "stdio.h"
#include "malloc.h"
#define TRUE 1
#define FALSE 0
#define OK  1
#define ERROR  0
#define INFEASIBLE -1
#define OVERFLOW -2
#define STACK_INIT_SIZE 20
#define STACKINCREMENT 2
#define MAXQSIZE 100

typedef int  Status;
typedef int  ElemType;

typedef struct BiTNode{
  ElemType data;
  struct BiTNode *lchild,*rchild;//左右孩子指针
} BiTNode,*BiTree;

BiTree Insert(BiTree &T,ElemType x){
    if(!T){
        T=(BiTree)malloc(sizeof(struct BiTNode));
        T->data=x;
        T->lchild=T->rchild=NULL;
    }
    else{
        if(T->data>x){
            T->lchild=Insert(T->lchild,x);
        }
        else if(T->data<x){
            T->rchild=Insert(T->rchild,x);
        }
    }
    return T;
}

Status Visit( ElemType e ) {
printf("%d ",e);
return OK;
}// PrintElement

Status PreOrderTraverse( BiTree T ) {
   // 前序遍历二叉树T的递归算法，对每个数据元素调用函数Visit。
   if(T){
   Visit(T->data);
   PreOrderTraverse(T->lchild);
   PreOrderTraverse(T->rchild);
   }
   return OK;

} // PreOrderTraverse

Status InOrderTraverse( BiTree T) {
     // 中序遍历二叉树T的递归算法，对每个数据元素调用函数Visit。
    if(T){
        InOrderTraverse(T->lchild);
        Visit(T->data);
        InOrderTraverse(T->rchild);
        }
        return OK;
} // InOrderTraverse

Status PostOrderTraverse( BiTree T ) {
     // 后序遍历二叉树T的递归算法，对每个数据元素调用函数Visit。
     if(T){
        PostOrderTraverse(T->lchild);
        PostOrderTraverse(T->rchild);
        Visit(T->data);
     }
        return OK;
} // PostOrderTraverse

Status SearchTree(BiTree T,ElemType ch){
    if(T){
    if(ch==T->data){
        return OK;
    }
    else if(ch<T->data){
        SearchTree(T->lchild,ch);
        }
    else if(ch>T->data){
        SearchTree(T->rchild,ch);
    }
    }
    else return ERROR;
}

typedef BiTree SElemType;

struct SqStack
{
     SElemType *base; // 在栈构造之前和销毁之后，base的值为NULL
     SElemType *top; // 栈顶指针
     int stacksize; // 当前已分配的存储空间，以元素为单位
}; // 顺序栈

Status InitStack(SqStack &S)
{
// 构造一个空栈S，该栈预定义大小为STACK_INIT_SIZE
    S.base=(SElemType *)malloc(STACK_INIT_SIZE*sizeof(SElemType));
    if(!S.base) return ERROR;
    S.top=S.base;
    S.stacksize=STACK_INIT_SIZE;
	return OK;
}

Status Push(SqStack &S,SElemType e)
{
// 在栈S中插入元素e为新的栈顶元素
    if(S.top-S.base>=S.stacksize){
        S.base=(SElemType *)realloc(S.base,(S.stacksize+STACKINCREMENT)*sizeof(SElemType));
        if(!S.base)return ERROR;
        S.top=S.base+S.stacksize;
        S.stacksize+=STACKINCREMENT;
    }
	*S.top=e;
	S.top++;
	return OK;
}

Status Pop(SqStack &S,SElemType &e)
{
// 若栈不空，则删除S的栈顶元素，用e返回其值，并返回OK；否则返回ERROR
    if(S.top==S.base)return ERROR;
    --S.top;
	e=*S.top;
	return OK;
}

Status StackEmpty(SqStack S){
    if(S.top-S.base==0) return OK;
    else return ERROR;
}

Status Traverse(BiTree T){
    SqStack S;
    InitStack(S);
    BiTNode *p;
    p=T;
    while(p||!StackEmpty(S)){
        if(p){
            Push(S,p);
            p=p->lchild;
        }
        else {
            Pop(S,p);
            Visit(p->data);
            p=p->rchild;
        }
    }
    return OK;
}

/*Status M_nonrecursive(BiTree T)        //中序遍历序列(非递归算法)
{   SqStack S;
    InitStack(S);
	while(T!=NULL||S.base!=S.top)
	{
		while(T!=NULL)
		{
			*S.top++=T;
			T = T->lchild;
		}
		T=*--S.top;
		Visit(T->data);
		T=T->rchild;
	}
	return OK;
}
*/
typedef struct QNode{
    BiTNode t;
    struct QNode *next;
}QNode,*QueuePtr;

typedef struct{
    QueuePtr front;
    QueuePtr rear;
}LinkQueue;

Status InitQueue(LinkQueue &Q){
    Q.front=Q.rear=(QueuePtr)malloc(sizeof(QNode));
    if(!Q.front) return ERROR;
    Q.front->next=NULL;
    return OK;
}

Status EnQueue(LinkQueue &Q,BiTNode *a){
    QueuePtr p;
    p=(QueuePtr)malloc(sizeof(QNode));
    if(!p) return ERROR;
    p->t=*a;
    p->next=NULL;
    Q.rear->next=p;
    Q.rear=p;
    return OK;
}

Status DeQueue(LinkQueue &Q,BiTNode *&a){
    QueuePtr p;
    if(Q.front==Q.rear) return ERROR;
    p=Q.front->next;
    *a=p->t;
    Q.front->next=p->next;
    if(Q.rear==p)Q.rear=Q.front;
    free(p);
    return OK;
}

Status QueueEmpty(LinkQueue Q){
    if(Q.rear!=Q.front) return OK;
    else return ERROR;
    }

Status OrderTraverse(BiTree T){
    LinkQueue Q;
    InitQueue(Q);
    BiTNode *p;
    p=T;
    EnQueue(Q,p);
    while(QueueEmpty(Q)){
        DeQueue(Q,p);
        printf("%d ",p->data);
        if(p->lchild)
            EnQueue(Q,p->lchild);
        if(p->rchild)
            EnQueue(Q,p->rchild);
    }
}

int main()   //主函数
{
    BiTree T=NULL;
    int i;
    scanf("%d",&i);
    int n[i];
    int m;
    for(m=0;m<i;m++){
        scanf("%d",&n[m]);
        Insert(T,n[m]);
    }
    PreOrderTraverse(T);
    printf("\n");
    InOrderTraverse(T);
    printf("\n");
    PostOrderTraverse(T);
    printf("\n");
    int a;
    scanf("%d",&a);
    printf("%d\n",SearchTree(T,a));
    int b;
    scanf("%d",&b);
    printf("%d\n",SearchTree(T,b));
    int c;
    scanf("%d",&c);
    Insert(T,c);PreOrderTraverse(T);
    printf("\n");
    InOrderTraverse(T);
    printf("\n");
    PostOrderTraverse(T);
    printf("\n");
   // M_nonrecursive(T);
    Traverse(T);
    printf("\n");
    OrderTraverse(T);
 }//main
