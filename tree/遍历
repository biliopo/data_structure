#include "stdio.h"
#include "malloc.h"
#define TRUE 1
#define FALSE 0
#define OK  1
#define ERROR  0
#define INFEASIBLE -1
#define OVERFLOW -2
typedef int  Status;

typedef char  ElemType;

typedef struct BiTNode{
  ElemType data;
  struct BiTNode *lchild,*rchild;//左右孩子指针
} BiTNode,*BiTree;

Status CreateBiTree(BiTree &T) {  
  // 按先序次序输入二叉树中结点的值（一个字符），’#’字符表示空树，
  // 构造二叉链表表示的二叉树T。
  char ch;
  scanf("%c",&ch);
  if (ch=='#') T = NULL;
  else {
    if (!(T = (BiTNode *)malloc(sizeof(BiTNode)))) return ERROR;
    T->data=ch;
    CreateBiTree(T->lchild);
    CreateBiTree(T->rchild);
  }
  return OK;
} // CreateBiTree


Status Visit( ElemType e ) {  // 输出元素e的值
printf("%c", e );
return OK;
}// PrintElement


Status PreOrderTraverse( BiTree T ) {
   // 前序遍历二叉树T的递归算法，对每个数据元素调用函数Visit。
   if(T){
   Visit(T->data);
   PreOrderTraverse(T->lchild);
   PreOrderTraverse(T->rchild);
   }
   return OK;

} // PreOrderTraverse

Status InOrderTraverse( BiTree T) {
     // 中序遍历二叉树T的递归算法，对每个数据元素调用函数Visit。
    if(T){
        InOrderTraverse(T->lchild);
        Visit(T->data);
        InOrderTraverse(T->rchild);
        }
        return OK;
} // InOrderTraverse

Status PostOrderTraverse( BiTree T ) {
     // 后序遍历二叉树T的递归算法，对每个数据元素调用函数Visit。
     if(T){
        PostOrderTraverse(T->lchild);
        PostOrderTraverse(T->rchild);
        Visit(T->data);
     }
        return OK;
} // PostOrderTraverse



int main()   //主函数
{
    BiTree T;
    CreateBiTree(T);
    PreOrderTraverse(T);
    printf("\n");
    InOrderTraverse(T);
    printf("\n");
    PostOrderTraverse(T);
 }//main
