#include "stdio.h"
#include "stdlib.h"
#define TRUE  1
#define FALSE  0
#define OK  1
#define ERROR  0
#define INFEASLBLE  -1
#define OVERFLOW  -2
#define MAXSTRLEN  255 	//用户可在255以内定义最大串长
typedef unsigned char SString[MAXSTRLEN+1];	//0号单元存放串的长度

/*
next[j]= 0  if(j=1);
next[j]= max{k|1<k<j且'p1p2...p(k-1)'=='p(j-k+1)...p(j-1)'} 当此集合不空时
next[j]= 1 其他情况

模式串和主串匹配时，若匹配成功i和j加1，否则，i不变，j退到next[j]的位置再比较，以此类推。直到两种可能出现：
一种时j后退后字符匹配相等，i和j加1，继续匹配；一种是j退到0（模式串的第一个字符失配），则将模式串右滑一个字符，重新匹配。
*/

void get_next(SString T,int next[]){
// 算法4.7
// 求模式串T的next函数值并存入数组next
//此处的i和j与字符匹配时的i和j不同，此处皆指模式串
   int i=1;
   next[1]=0;
   int j=0;
   while(i<T[0]){
        if(j==0||T[i]==T[j]){
            ++i;
            ++j;
            next[i]=j;
        }
        else j=next[j];
   }
}

int Index_KMP(SString S,SString T,int pos){
// 算法4.6
// 利用模式串T的next函数求T在主串S中第pos个字符之后的位置
    int i=pos;
    int j=1;
    int next[T[0]];
get_next(T,next);
    while(i<=S[0]&&j<=T[0]){
        if(j==0||S[i]==T[j]){
            ++i;
            ++j;
        }
        else j=next[j];
    }
    if(j>T[0]) return i-T[0];
    else return 0;
}
main()
{
SString T,S;
 int i,j,n;
 char ch;
 int pos;
 scanf("%d",&n);    // 指定n对需进行模式匹配的字符串
ch=getchar();
for(j=1;j<=n;j++)
{
ch=getchar();
  for( i=1;i<=MAXSTRLEN&&(ch!='\n');i++)    // 录入主串
  {
S[i]=ch;
  ch=getchar();
}
S[0]=i-1;    // S[0]用于存储主串中字符个数
ch=getchar();
for( i=1;i<=MAXSTRLEN&&(ch!='\n');i++)    // 录入模式串
{
  T[i]=ch;
  ch=getchar();
}
T[0]=i-1;    // T[0]用于存储模式串中字符个数
pos=Index_KMP(S,T,0);    
printf("%d\n",pos);
}
    }
