#include<stdio.h>
#include<malloc.h>
#define ERROR 0
#define OK 1
#define ElemType int

typedef int Status;
typedef struct LNode
{
 int data;
 struct LNode *next;
}LNode,*LinkList;

int CreateLink_L(LinkList &L,int n){
// 创建含有n个元素的单链表
  LinkList p,q;
  int i;
  ElemType e;
  L = (LinkList)malloc(sizeof(LNode));
  L->next = NULL;              // 先建立一个带头结点的单链表
  q = (LinkList)malloc(sizeof(LNode));
  q = L;
  for (i=0; i<n; i++) {
	 scanf("%d", &e);
    p = (LinkList)malloc(sizeof(LNode));  // 生成新结点
    p->data=e;
    p->next=q->next;
    q->next=p;
    q=p;
  }
  return OK;
}

int LoadLink_L(LinkList &L){
// 单链表遍历
 LinkList p = L->next;
 if(p==NULL)printf("The List is empty!");
 else
 {
	 while(p)
	 {
		printf("%d ",p->data);
		p=p->next;
	 }
 }
 printf("\n");
 return OK;
}

int Merge_linklist(LinkList &La,LinkList &Lb,LinkList &Lc)
{
    LinkList pc,pa=La->next,pb=Lb->next;
    Lc=pc=La;
    while(pa&&pb){
        if(pa->data<=pb->data){
        pc->next=pa;
        pc=pa;
        pa=pa->next;
    }
    else{
        pc->next=pb;
        pc=pb;
        pb=pb->next;
    }
}
    pc->next=pa?pa:pb;
    free(Lb);
}

int main()
{
    LinkList La,Lb,Lc;
    int i,j;
    scanf("%d",&i);
    CreateLink_L(La,i);
    scanf("%d",&j);
    CreateLink_L(Lb,j);
    Lc=(LinkList)malloc((i+j)*sizeof(LNode));
    printf("List A:");
    LoadLink_L(La);
    printf("List B:");
    LoadLink_L(Lb);
    Merge_linklist(La,Lb,Lc);
    printf("List C:");
    LoadLink_L(Lc);
}
